{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","clicked","setClicked","nav1","setNav1","swiping","setSwiping","handlers","useSwipeable","onSwipedLeft","onSwipedRight","onSwiping","preventDefaultTouchmoveEvent","trackMouse","className","onClick","alt","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAiFeA,MAxEf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,oBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAKPC,EAAWC,uBAAa,CAC5BC,aAAc,WACZL,GAAQ,GACRE,GAAW,IAEbI,cAAe,WACbN,GAAQ,GACRE,GAAW,IAEbK,UAAW,kBAAML,GAAW,IAC5BM,8BAA8B,EAC9BC,YAAY,IAEd,OACE,sBAAKC,UAAU,MAAf,UACE,sBACEA,UAAU,WACVC,QAAS,WACHd,GACFC,GAAW,IAJjB,UAQE,qBACEc,IAAI,UACJC,IAAI,4HAEN,kEACA,+EAEF,8CACEH,UAAU,gCACNP,GAFN,IAGEQ,QAAS,WACFd,GACHC,GAAW,IALjB,UASE,sBAAKY,UAAU,wBAAf,UACE,qBAAKA,UAAYX,EAA2B,gBAApB,oBACxB,qBAAKW,UAAWX,EAAO,kBAAoB,qBAE5CF,GACC,cAAC,IAAD,UACE,qBAAKa,UAAWT,EAAU,uBAAyB,eAAnD,SACIF,EAOA,sBAAKW,UAAU,SAAf,UACE,qBAAKA,UAAW,mBAChB,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,sBATjB,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAW,YAChB,qBAAKA,UAAU,YACf,qBAAKA,UAAU,2BCpDlBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kBCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ef200b2.chunk.js","sourcesContent":["import { Table } from \"react-bootstrap\";\nimport Draggable from \"react-draggable\"; // The default\nimport \"./App.css\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\n\nconst initialState = { pos: 0, sliding: false };\n\nfunction App() {\n  const [clicked, setClicked] = useState(false);\n  const [nav1, setNav1] = useState(false);\n  const [swiping, setSwiping] = useState(false);\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      setNav1(true);\n      setSwiping(false);\n    },\n    onSwipedRight: () => {\n      setNav1(false);\n      setSwiping(false);\n    },\n    onSwiping: () => setSwiping(true),\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n  return (\n    <div className=\"App\">\n      <div\n        className=\"testCont\"\n        onClick={() => {\n          if (clicked) {\n            setClicked(false);\n          }\n        }}\n      >\n        <img\n          alt=\"spation\"\n          src=\"https://content.screencast.com/users/gi_kherbach/folders/Default/media/4bee70d5-ae18-4073-8baf-bf4b8a351dab/default.png\"\n        />\n        <h4>Welcome to Ismail KHERBACH Demo!</h4>\n        <p>Please switch to mobile view to do the demo</p>\n      </div>\n      <div\n        className=\"ProccedBloc flex fdc jcc aic\"\n        {...handlers}\n        onClick={() => {\n          if (!clicked) {\n            setClicked(true);\n          }\n        }}\n      >\n        <div className=\"dots fdr flex jcc aic\">\n          <div className={!nav1 ? \"circleDotActive\" : \"circleDotGray\"}></div>\n          <div className={nav1 ? \"circleDotActive\" : \"circleDotGray\"}></div>\n        </div>\n        {clicked && (\n          <PerfectScrollbar>\n            <div className={swiping ? \"scroll-cards-swiping\" : \"scroll-cards\"}>\n              {!nav1 ? (\n                <div className=\"handle\">\n                  <div className={\"navCard\"}></div>\n                  <div className=\"navCard\"></div>\n                  <div className=\"navCard\"></div>\n                </div>\n              ) : (\n                <div className=\"handle\">\n                  <div className={\"navCardDragged\"}></div>\n                  <div className=\"navCardDragged\"></div>\n                  <div className=\"navCardDragged\"></div>\n                </div>\n              )}\n            </div>\n          </PerfectScrollbar>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\n\nimport \"./styles.scss\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}